generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

// datasource db {
//   provider = "postgresql"
//   url      = "postgres://admin:ztPs6uLfxoX2@ep-fragrant-base-380181-pooler.eu-central-1.aws.neon.tech/neondb?pool_timeout=20&connection_limit=10&connect_timeout=20&pgbouncer=true"
// }

// DATABASE_URL="postgresql://postgres:testpass123@localhost:6500/mydb?schema=public"
// ~ docker run -d -e POSTGRES_DB=db -e POSTGRES_PASSWORD=admin -e POSTGRES_USER=postgres -p "5432:5432" postgres
datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:admin@localhost:5432/db?schema=public"
}

model AcitivityDescription {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String?
  fixed_hour              Int?
  fixed_minute            Int?
  fixed_day               Int?
  AcitivityTag            AcitivityTag[]
  DefaultVacationActivity DefaultVacationActivity[]
  OrderActivity           OrderActivity[]
}

model AcitivityTag {
  id                    Int                  @id @default(autoincrement())
  tagId                 Int
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  Tag                   Tag                  @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model Color {
  id   Int    @id @default(autoincrement())
  name String
  Tag  Tag[]
}

model Location {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  description         String?
  Hotel               Hotel[]
  VacationDescription VacationDescription[]
}

model Tag {
  id           Int            @id @default(autoincrement())
  label        String
  colorId      Int
  AcitivityTag AcitivityTag[]
  Color        Color          @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@unique([label, colorId], map: "Tag.label_colorId")
}

model User {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique
  password            String
  CustomView          CustomView[]
  Customer            Customer[]
  Order               Order[]
  OrderActivityEvents OrderActivityEvents[]
  ViewColumns         ViewColumns[]
  ViewSidebar         ViewSidebar[]
  ViewTags            ViewTags[]
}

model VacationDescription {
  id                        Int                       @id @default(autoincrement())
  name                      String
  description               String?
  image_url                 String?
  slug                      String?
  permalink                 String?
  date_created              String?
  date_created_gmt          String?
  date_modified             String?
  date_modified_gmt         String?
  type                      String?
  status                    String?
  price                     String?
  locationId                Int?
  date_imported             String                    @default("")
  is_parent                 Boolean                   @default(false)
  parent_id                 Int?
  DefaultVacationActivity   DefaultVacationActivity[]
  Order                     Order[]
  Location                  Location?                 @relation(fields: [locationId], references: [id], onDelete: NoAction)
  VacationDescription       VacationDescription?      @relation("VacationDescriptionToVacationDescription", fields: [parent_id], references: [id], onDelete: NoAction)
  other_VacationDescription VacationDescription[]     @relation("VacationDescriptionToVacationDescription")
  VacationHotel             VacationHotel[]
  VacationRoom              VacationRoom[]
  VacationServices          VacationServices[]
}

model DefaultVacationActivity {
  id                    Int                  @id @default(autoincrement())
  vacationDescriptionId Int
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  VacationDescription   VacationDescription  @relation(fields: [vacationDescriptionId], references: [id], onDelete: Cascade)
}

model Customer {
  id               Int    @id @default(autoincrement())
  first_name       String
  last_name        String
  company          String
  address_1        String
  address_2        String
  email            String @unique
  city             String
  state            String
  postcode         String
  country          String
  phone            String
  title            String
  title_formatted  String
  shipping_address String
  birth_date       String @default("")
  user_id          Int
  User             User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Order {
  id                   Int                   @id
  order_key            String
  date_created         DateTime              @default(now())
  date_modified        DateTime              @default(now())
  date_imported        DateTime              @default(now())
  price                Decimal               @db.Decimal
  vacation_id          Int
  start_date           DateTime              @db.Date
  end_date             DateTime              @db.Date
  duration             Int
  persons              Int
  room_description     String
  payment_method       String
  payment_method_title String
  add_to_community     String                @default("")
  knowledge_from       String
  crossfit_box         String?
  status               String                @default("pending")
  additional_services  String                @default("")
  order_id             Int
  user_id              Int
  hotel_id             Int?
  room_id              Int?
  Hotel                Hotel?                @relation(fields: [hotel_id], references: [id], onDelete: NoAction)
  Room                 Room?                 @relation(fields: [room_id], references: [id], onDelete: NoAction)
  User                 User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Vacation             VacationDescription   @relation(fields: [vacation_id], references: [id], onDelete: NoAction)
  OrderActivity        OrderActivity[]
  OrderActivityEvents  OrderActivityEvents[]
  OrderTag             OrderTag[]
}

model Service {
  id               Int                @id @default(autoincrement())
  name             String
  description      String             @default("")
  VacationServices VacationServices[]
}

model VacationServices {
  id          Int                 @id @default(autoincrement())
  vacation_id Int
  service_id  Int
  Service     Service             @relation(fields: [service_id], references: [id], onDelete: Cascade)
  Vacation    VacationDescription @relation(fields: [vacation_id], references: [id], onDelete: Cascade)
}

model OrderActivity {
  id                    Int                  @id @default(autoincrement())
  order_id              Int
  datetime              DateTime?
  activityDescriptionId Int
  AcitivityDescription  AcitivityDescription @relation(fields: [activityDescriptionId], references: [id], onDelete: Cascade)
  Order                 Order                @relation(fields: [order_id], references: [id], onDelete: Cascade)
}

model OrderActivityEvents {
  id       Int      @id @default(autoincrement())
  content  String   @default("")
  mood     String   @default("")
  date     DateTime @default(now())
  type     String   @default("")
  order_id Int
  user_id  Int
  Order    Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Contact {
  id         Int     @id @default(autoincrement())
  first_name String
  last_name  String
  company    String?
  address_1  String?
  address_2  String?
  email      String  @unique
  city       String?
  state      String?
  postcode   String?
  phone      String
  Hotel      Hotel[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Hotel {
  id            Int             @id @default(autoincrement())
  name          String
  locationId    Int?
  contactId     Int?
  Contact       Contact?        @relation(fields: [contactId], references: [id], onDelete: NoAction)
  Location      Location?       @relation(fields: [locationId], references: [id], onDelete: NoAction)
  Order         Order[]
  VacationHotel VacationHotel[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Room {
  id           Int            @id @default(autoincrement())
  name         String
  Order        Order[]
  VacationRoom VacationRoom[]
}

model VacationHotel {
  id                  Int                 @id @default(autoincrement())
  vacation_id         Int
  hotel_id            Int
  Hotel               Hotel               @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  VacationDescription VacationDescription @relation(fields: [vacation_id], references: [id], onDelete: Cascade)
}

model VacationRoom {
  id                  Int                 @id @default(autoincrement())
  vacation_id         Int
  room_id             Int
  Room                Room                @relation(fields: [room_id], references: [id], onDelete: Cascade)
  VacationDescription VacationDescription @relation(fields: [vacation_id], references: [id], onDelete: Cascade)
}

model ViewColumns {
  id        Int    @id @default(autoincrement())
  modelName String
  columnIds String
  user_id   Int
  User      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([modelName, user_id], map: "ViewColumns_modelName_user_id")
}

model OrderTag {
  id      Int    @id @default(autoincrement())
  label   String
  orderId Int
  color   String @default("")
  Order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model ViewTags {
  id        Int    @id @default(autoincrement())
  modelName String
  tags      String
  user_id   Int
  User      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CustomView {
  id       Int    @id @default(autoincrement())
  baseView String
  title    String
  user_id  Int
  name     String
  User     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ViewSidebar {
  id        Int     @id @default(autoincrement())
  modelName String
  show      Boolean @default(false)
  user_id   Int
  User      User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model OrderReminder {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
}
